import bbwrl.utils.pyxinstall
import tests.bot.wrapped_reward_distribution as rd
import pytest
import numpy as np


@pytest.mark.parametrize("input, expected", [
    (1, 11),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8),
    (9, 9),
    (10, 10),
    (11, 10),
    (12, 10),
    (13, 10),
])
def test_get_value(input, expected):
    assert rd.get_value(input) == expected


@pytest.mark.parametrize("input, expected", [
    (2, False),
    (3, False),
    (4, False),
    (5, False),
    (6, False),
    (7, False),
    (8, False),
    (9, False),
    (10, False),
    (11, True),
])
def test_is_ace(input, expected):
    assert rd.is_ace(input) == expected


@pytest.mark.parametrize("distr1, distr2, scalar, expected", [
    (np.zeros(17),
     np.array([0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]),
     1.0,
     np.array([0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.1,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0])),
    (np.zeros(17),
     np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               1.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]),
     0.1,
     np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.1,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0])),
    (np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.9,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]),
     np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               1.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]),
     0.1,
     np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               1.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]))
])
def test_add(distr1, distr2, scalar, expected):
    assert np.array_equal(rd.add(distr1, distr2, scalar), expected)


def test_empty_distr():
    assert np.array_equal(np.zeros(17), rd.empty_distr())


@pytest.mark.parametrize("input, expected", [
    (0.0, np.array([0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0])),
    (4.0, np.array([0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0])),
    (1.5, np.array([0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0])),
    (-4.0, np.array([1.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0,
                     0.0]))
])
def test_constant_distr(input, expected):
    assert np.array_equal(rd.constant_distr(input), expected)


@pytest.mark.parametrize("input, expected", [
    (np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               1.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]),
     np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               1.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0])),
    (np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.5,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.5,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]),
     np.array([0.5,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.5,
               0.0,
               0.0,
               0.0,
               0.0]))
])
def test_double_distr(input, expected):
    assert np.array_equal(rd.double_distr(input), expected)


@pytest.mark.parametrize("input, expected", [
    (np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               1.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]),
     np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               1.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0])),
    (np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.5,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.5,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0]),
     np.array([0.25,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.5,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.25,
               0.0,
               0.0,
               0.0,
               0.0])),
    (np.array([0.0,
               0.0,
               0.0,
               0.0,
               0.25,
               0.0,
               0.0,
               0.0,
               0.5,
               0.0,
               0.0,
               0.0,
               0.25,
               0.0,
               0.0,
               0.0,
               0.0]),
     np.array([0.0625,
               0.0,
               0.0,
               0.0,
               0.25,
               0.0,
               0.0,
               0.0,
               0.375,
               0.0,
               0.0,
               0.0,
               0.25,
               0.0,
               0.0,
               0.0,
               0.0625]))
])
def test_double_variable(input, expected):
    assert np.array_equal(rd.double_variable(input), expected)


@pytest.mark.parametrize("card_distr, card, banned_value, expected", [
    (np.array([0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]),
     5,
     0,
     1.0/13.0
    ),
    (np.array([0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16]),
     1,
     10,
     1.0
    ),
    (np.array([0, 100, 8, 4, 10, 2, 5, 11, 4, 6, 5, 10, 15, 20]),
     11,
     11,
     0.1
    ),
])
def test_card_probability(card_distr, card, banned_value, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert reward_distr.card_probability(card, banned_value) == expected


@pytest.mark.parametrize("card_distr, player_total, player_aces, dealer_total, expected", [
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     15,
     0,
     5,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0]),
     7,
     0,
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
     18,
     0,
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     19,
     1,
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     18,
     1,
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     17,
     1,
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0]),
     22,
     0,
     17,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0]),
     22,
     1,
     17,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
])
def test_distr_hit(card_distr, player_total, player_aces, dealer_total, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_hit(player_total, player_aces, dealer_total), expected)


@pytest.mark.parametrize("card_distr, player_total, dealer_aces, dealer_total, expected", [
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     15,
     0,
     5,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     15,
     0,
     7,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]),
     17,
     0,
     7,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 16]),
     17,
     0,
     7,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (16/32)*(15/31), 0.0, 0.5, 0.0, (16/32)*(16/31), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 16]),
     19,
     1,
     11,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 16, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]),
     19,
     0,
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
])
def test_distr_stand(card_distr, player_total, dealer_aces, dealer_total, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_stand(player_total, dealer_aces, dealer_total, True), expected)


@pytest.mark.parametrize("card_distr, player_total, dealer_aces, dealer_total, expected", [
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     15,
     1,
     23,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 16]),
     19,
     1,
     11,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2/3, 0.0, 0.0, 0.0, 1/3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 16, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]),
     19,
     0,
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2/3, 0.0, 0.0, 0.0, 1/3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
])
def test_distr_stand_false(card_distr, player_total, dealer_aces, dealer_total, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_stand(player_total, dealer_aces, dealer_total, False), expected)


@pytest.mark.parametrize("card_distr, player_total, player_aces, dealer_total, expected", [
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     15,
     0,
     5,
     np.array([0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0]),
     15,
     0,
     7,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0]),
     17,
     0,
     20,
     np.array([0.0, 0.0, 0.0, 0.0, 1/3, 0.0, 0.0, 0.0, 1/3, 0.0, 0.0, 0.0, 1/3, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]),
     20,
     1,
     20,
     np.array([0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
    )
])
def test_distr_double(card_distr, player_total, player_aces, dealer_total, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_double(player_total, player_aces, dealer_total), expected)


@pytest.mark.parametrize("card_distr, player_card, dealer_card, expected", [
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     9,
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0]),
     9,
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]),
    ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 0, 0]),
     8,
     17,
     np.array([0.0, 0.0, 0.0, 0.0, 1/9, 0.0, 2/9, 0.0, 3/9, 0.0, 2/9, 0.0, 1/9, 0.0, 0.0, 0.0, 0.0]),
     )
])
def test_distr_split_general(card_distr, player_card, dealer_card, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_split_general(player_card, dealer_card), expected)


@pytest.mark.parametrize("card_distr, dealer_card, expected", [
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0]),
     9,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]),
     ),
    (np.array([0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0]),
     17,
     np.array([0.0, 0.0, 0.0, 0.0, 1/9, 0.0, 2/9, 0.0, 3/9, 0.0, 2/9, 0.0, 1/9, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]),
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.5, 0.25, 0.0, 0.0]),
     )
])
def test_distr_split_tens(card_distr, dealer_card, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_split_tens(dealer_card), expected)


@pytest.mark.parametrize("card_distr, dealer_card, expected", [
    (np.array([0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0]),
     9,
     np.array([0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 16]),
     11,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.0, 0.5, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0]),
     ),
])
def test_distr_split_aces(card_distr, dealer_card, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_split_aces(dealer_card), expected)


@pytest.mark.parametrize("card_distr, player_total, player_aces, dealer_card, expected", [
    (np.array([0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 16]),
     12,
     1,
     11,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.0, 0.5, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]),
     20,
     0,
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.5, 0.25, 0.0, 0.0]),
     ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16]),
     18,
     0,
     8,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]),
     ),
])
def test_distr_split(card_distr, player_total, player_aces, dealer_card, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_split(player_total, player_aces, dealer_card), expected)


@pytest.mark.parametrize("card_distr, player_total, player_aces, dealer_card, expected", [
    (np.array([0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]),
     21,
     1,
     5,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]),
     21,
     1,
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1/13, 0.0, 0.0, 12/13, 0.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]),
     21,
     1,
     11,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4/13, 0.0, 0.0, 9/13, 0.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16]),
     11,
     0,
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16]),
     20,
     0,
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0]),
     10,
     0,
     7,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
     ),
    (np.array([0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
     23,
     1,
     10,
     np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
     ),
])
def test_distr_hit_stand_double(card_distr, player_total, player_aces, dealer_card, expected):
    reward_distr = rd.WrappedRewardDistribution(lambda x: x)
    reward_distr.set_card_distribution(card_distr)
    assert np.allclose(reward_distr.distr_hit_stand_double(player_total, player_aces, dealer_card), expected)
